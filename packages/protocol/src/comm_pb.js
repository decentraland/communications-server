/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf')
var goog = jspb
var global = Function('return this')()

goog.exportSymbol('proto.ChatMessage', null, global)
goog.exportSymbol('proto.GenericMessage', null, global)
goog.exportSymbol('proto.MessageType', null, global)
goog.exportSymbol('proto.PositionMessage', null, global)
goog.exportSymbol('proto.ServerSetupRequestMessage', null, global)

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GenericMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.GenericMessage, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.GenericMessage.displayName = 'proto.GenericMessage'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.GenericMessage.prototype.toObject = function(opt_includeInstance) {
    return proto.GenericMessage.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.GenericMessage} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.GenericMessage.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        type: jspb.Message.getFieldWithDefault(msg, 1, 0)
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GenericMessage}
 */
proto.GenericMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.GenericMessage()
  return proto.GenericMessage.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GenericMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GenericMessage}
 */
proto.GenericMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!proto.MessageType} */ (reader.readEnum())
        msg.setType(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GenericMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.GenericMessage.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GenericMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GenericMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getType()
  if (f !== 0.0) {
    writer.writeEnum(1, f)
  }
}

/**
 * optional MessageType type = 1;
 * @return {!proto.MessageType}
 */
proto.GenericMessage.prototype.getType = function() {
  return /** @type {!proto.MessageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/** @param {!proto.MessageType} value */
proto.GenericMessage.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value)
}

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerSetupRequestMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.ServerSetupRequestMessage, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.ServerSetupRequestMessage.displayName = 'proto.ServerSetupRequestMessage'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ServerSetupRequestMessage.prototype.toObject = function(opt_includeInstance) {
    return proto.ServerSetupRequestMessage.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.ServerSetupRequestMessage} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.ServerSetupRequestMessage.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        type: jspb.Message.getFieldWithDefault(msg, 1, 0),
        updatesPerSecond: jspb.Message.getFieldWithDefault(msg, 2, 0)
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerSetupRequestMessage}
 */
proto.ServerSetupRequestMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.ServerSetupRequestMessage()
  return proto.ServerSetupRequestMessage.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerSetupRequestMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerSetupRequestMessage}
 */
proto.ServerSetupRequestMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!proto.MessageType} */ (reader.readEnum())
        msg.setType(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setUpdatesPerSecond(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerSetupRequestMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.ServerSetupRequestMessage.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServerSetupRequestMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerSetupRequestMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getType()
  if (f !== 0.0) {
    writer.writeEnum(1, f)
  }
  f = message.getUpdatesPerSecond()
  if (f !== 0) {
    writer.writeUint32(2, f)
  }
}

/**
 * optional MessageType type = 1;
 * @return {!proto.MessageType}
 */
proto.ServerSetupRequestMessage.prototype.getType = function() {
  return /** @type {!proto.MessageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/** @param {!proto.MessageType} value */
proto.ServerSetupRequestMessage.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value)
}

/**
 * optional uint32 updates_per_second = 2;
 * @return {number}
 */
proto.ServerSetupRequestMessage.prototype.getUpdatesPerSecond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/** @param {number} value */
proto.ServerSetupRequestMessage.prototype.setUpdatesPerSecond = function(value) {
  jspb.Message.setProto3IntField(this, 2, value)
}

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PositionMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.PositionMessage, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.PositionMessage.displayName = 'proto.PositionMessage'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.PositionMessage.prototype.toObject = function(opt_includeInstance) {
    return proto.PositionMessage.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.PositionMessage} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.PositionMessage.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        type: jspb.Message.getFieldWithDefault(msg, 1, 0),
        positionX: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
        positionY: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
        rotationX: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
        rotationY: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
        rotationZ: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
        rotationW: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
        time: jspb.Message.getFieldWithDefault(msg, 8, 0),
        peerId: jspb.Message.getFieldWithDefault(msg, 9, '')
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PositionMessage}
 */
proto.PositionMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.PositionMessage()
  return proto.PositionMessage.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PositionMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PositionMessage}
 */
proto.PositionMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!proto.MessageType} */ (reader.readEnum())
        msg.setType(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readFloat())
        msg.setPositionX(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readFloat())
        msg.setPositionY(value)
        break
      case 4:
        var value = /** @type {number} */ (reader.readFloat())
        msg.setRotationX(value)
        break
      case 5:
        var value = /** @type {number} */ (reader.readFloat())
        msg.setRotationY(value)
        break
      case 6:
        var value = /** @type {number} */ (reader.readFloat())
        msg.setRotationZ(value)
        break
      case 7:
        var value = /** @type {number} */ (reader.readFloat())
        msg.setRotationW(value)
        break
      case 8:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setTime(value)
        break
      case 9:
        var value = /** @type {string} */ (reader.readString())
        msg.setPeerId(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PositionMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.PositionMessage.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PositionMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PositionMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getType()
  if (f !== 0.0) {
    writer.writeEnum(1, f)
  }
  f = message.getPositionX()
  if (f !== 0.0) {
    writer.writeFloat(2, f)
  }
  f = message.getPositionY()
  if (f !== 0.0) {
    writer.writeFloat(3, f)
  }
  f = message.getRotationX()
  if (f !== 0.0) {
    writer.writeFloat(4, f)
  }
  f = message.getRotationY()
  if (f !== 0.0) {
    writer.writeFloat(5, f)
  }
  f = message.getRotationZ()
  if (f !== 0.0) {
    writer.writeFloat(6, f)
  }
  f = message.getRotationW()
  if (f !== 0.0) {
    writer.writeFloat(7, f)
  }
  f = message.getTime()
  if (f !== 0) {
    writer.writeUint64(8, f)
  }
  f = message.getPeerId()
  if (f.length > 0) {
    writer.writeString(9, f)
  }
}

/**
 * optional MessageType type = 1;
 * @return {!proto.MessageType}
 */
proto.PositionMessage.prototype.getType = function() {
  return /** @type {!proto.MessageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/** @param {!proto.MessageType} value */
proto.PositionMessage.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value)
}

/**
 * optional float position_x = 2;
 * @return {number}
 */
proto.PositionMessage.prototype.getPositionX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0))
}

/** @param {number} value */
proto.PositionMessage.prototype.setPositionX = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value)
}

/**
 * optional float position_y = 3;
 * @return {number}
 */
proto.PositionMessage.prototype.getPositionY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0))
}

/** @param {number} value */
proto.PositionMessage.prototype.setPositionY = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value)
}

/**
 * optional float rotation_x = 4;
 * @return {number}
 */
proto.PositionMessage.prototype.getRotationX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0))
}

/** @param {number} value */
proto.PositionMessage.prototype.setRotationX = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value)
}

/**
 * optional float rotation_y = 5;
 * @return {number}
 */
proto.PositionMessage.prototype.getRotationY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0))
}

/** @param {number} value */
proto.PositionMessage.prototype.setRotationY = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value)
}

/**
 * optional float rotation_z = 6;
 * @return {number}
 */
proto.PositionMessage.prototype.getRotationZ = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0))
}

/** @param {number} value */
proto.PositionMessage.prototype.setRotationZ = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value)
}

/**
 * optional float rotation_w = 7;
 * @return {number}
 */
proto.PositionMessage.prototype.getRotationW = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0))
}

/** @param {number} value */
proto.PositionMessage.prototype.setRotationW = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value)
}

/**
 * optional uint64 time = 8;
 * @return {number}
 */
proto.PositionMessage.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0))
}

/** @param {number} value */
proto.PositionMessage.prototype.setTime = function(value) {
  jspb.Message.setProto3IntField(this, 8, value)
}

/**
 * optional string peer_id = 9;
 * @return {string}
 */
proto.PositionMessage.prototype.getPeerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ''))
}

/** @param {string} value */
proto.PositionMessage.prototype.setPeerId = function(value) {
  jspb.Message.setProto3StringField(this, 9, value)
}

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.ChatMessage, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.ChatMessage.displayName = 'proto.ChatMessage'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.ChatMessage.prototype.toObject = function(opt_includeInstance) {
    return proto.ChatMessage.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.ChatMessage} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.ChatMessage.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        type: jspb.Message.getFieldWithDefault(msg, 1, 0),
        positionX: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
        positionY: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
        text: jspb.Message.getFieldWithDefault(msg, 4, ''),
        time: jspb.Message.getFieldWithDefault(msg, 5, 0),
        peerId: jspb.Message.getFieldWithDefault(msg, 6, '')
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatMessage}
 */
proto.ChatMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.ChatMessage()
  return proto.ChatMessage.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatMessage}
 */
proto.ChatMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {!proto.MessageType} */ (reader.readEnum())
        msg.setType(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readFloat())
        msg.setPositionX(value)
        break
      case 3:
        var value = /** @type {number} */ (reader.readFloat())
        msg.setPositionY(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setText(value)
        break
      case 5:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setTime(value)
        break
      case 6:
        var value = /** @type {string} */ (reader.readString())
        msg.setPeerId(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.ChatMessage.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined
  f = message.getType()
  if (f !== 0.0) {
    writer.writeEnum(1, f)
  }
  f = message.getPositionX()
  if (f !== 0.0) {
    writer.writeFloat(2, f)
  }
  f = message.getPositionY()
  if (f !== 0.0) {
    writer.writeFloat(3, f)
  }
  f = message.getText()
  if (f.length > 0) {
    writer.writeString(4, f)
  }
  f = message.getTime()
  if (f !== 0) {
    writer.writeUint64(5, f)
  }
  f = message.getPeerId()
  if (f.length > 0) {
    writer.writeString(6, f)
  }
}

/**
 * optional MessageType type = 1;
 * @return {!proto.MessageType}
 */
proto.ChatMessage.prototype.getType = function() {
  return /** @type {!proto.MessageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/** @param {!proto.MessageType} value */
proto.ChatMessage.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value)
}

/**
 * optional float position_x = 2;
 * @return {number}
 */
proto.ChatMessage.prototype.getPositionX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0))
}

/** @param {number} value */
proto.ChatMessage.prototype.setPositionX = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value)
}

/**
 * optional float position_y = 3;
 * @return {number}
 */
proto.ChatMessage.prototype.getPositionY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0))
}

/** @param {number} value */
proto.ChatMessage.prototype.setPositionY = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value)
}

/**
 * optional string text = 4;
 * @return {string}
 */
proto.ChatMessage.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}

/** @param {string} value */
proto.ChatMessage.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 4, value)
}

/**
 * optional uint64 time = 5;
 * @return {number}
 */
proto.ChatMessage.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0))
}

/** @param {number} value */
proto.ChatMessage.prototype.setTime = function(value) {
  jspb.Message.setProto3IntField(this, 5, value)
}

/**
 * optional string peer_id = 6;
 * @return {string}
 */
proto.ChatMessage.prototype.getPeerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''))
}

/** @param {string} value */
proto.ChatMessage.prototype.setPeerId = function(value) {
  jspb.Message.setProto3StringField(this, 6, value)
}

/**
 * @enum {number}
 */
proto.MessageType = {
  UNKNOWN: 0,
  SERVER_REQUEST_SETUP: 1,
  POSITION: 2,
  CHAT: 3
}

goog.object.extend(exports, proto)
